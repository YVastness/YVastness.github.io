{
    "sourceFile": "source/_posts/MySQL执行计划(explain命令)中Type的浅析.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1685875796578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1685875844536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,18 @@\n ---\n-title: Mybatis中#{}和${}的区别\n-date: 2022-11-12 12:24:46\n-tags: Mybatis\n+title: MySQL执行计划(explain命令)中Type的浅析\n+date: 2022-11-11 12:24:46\n+tags: MySQL\n ---\n-# MySQL执行计划(explain命令)中Type的浅析\n-\n ### Type 的相关知识点：\n \n > 由上至下，性能由最差到最好\n \n-| Type          | 介绍                                                         |\n-| ------------- | ------------------------------------------------------------ |\n-| ALL           | Full Table Scan， MySQL将遍历全表以找到匹配的行              |\n-| index         | Full Index Scan，index与ALL区别为index类型只遍历索引树       |\n-| range         | 索引范围扫描，对索引的扫描开始于某一点，返回匹配值域的行，常见于between、<、>等的查询 |\n-| ref           | 非唯一性索引扫描，返回匹配某个单独值的所有行。常见于使用非唯一索引即唯一索引的非唯一前缀进行的查找 |\n-| eq\\_ref       | 唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描 |\n+| Type          | 介绍                                                                                                                        |\n+| ------------- | --------------------------------------------------------------------------------------------------------------------------- |\n+| ALL           | Full Table Scan， MySQL将遍历全表以找到匹配的行                                                                             |\n+| index         | Full Index Scan，index与ALL区别为index类型只遍历索引树                                                                      |\n+| range         | 索引范围扫描，对索引的扫描开始于某一点，返回匹配值域的行，常见于between、<、>等的查询                                       |\n+| ref           | 非唯一性索引扫描，返回匹配某个单独值的所有行。常见于使用非唯一索引即唯一索引的非唯一前缀进行的查找                          |\n+| eq\\_ref       | 唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描                                          |\n | const、system | 当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量 |\n-| NULL          | MySQL在优化过程中分解语句，执行时甚至不用访问表或索引        |\n+| NULL          | MySQL在优化过程中分解语句，执行时甚至不用访问表或索引                                                                       |\n"
                }
            ],
            "date": 1685875796578,
            "name": "Commit-0",
            "content": "---\ntitle: Mybatis中#{}和${}的区别\ndate: 2022-11-12 12:24:46\ntags: Mybatis\n---\n# MySQL执行计划(explain命令)中Type的浅析\n\n### Type 的相关知识点：\n\n> 由上至下，性能由最差到最好\n\n| Type          | 介绍                                                         |\n| ------------- | ------------------------------------------------------------ |\n| ALL           | Full Table Scan， MySQL将遍历全表以找到匹配的行              |\n| index         | Full Index Scan，index与ALL区别为index类型只遍历索引树       |\n| range         | 索引范围扫描，对索引的扫描开始于某一点，返回匹配值域的行，常见于between、<、>等的查询 |\n| ref           | 非唯一性索引扫描，返回匹配某个单独值的所有行。常见于使用非唯一索引即唯一索引的非唯一前缀进行的查找 |\n| eq\\_ref       | 唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描 |\n| const、system | 当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量 |\n| NULL          | MySQL在优化过程中分解语句，执行时甚至不用访问表或索引        |\n"
        }
    ]
}